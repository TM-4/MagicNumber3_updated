<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERROR" xml:space="preserve">
    <value>【エラー】</value>
  </data>
  <data name="INFO" xml:space="preserve">
    <value>【詳細】</value>
  </data>
  <data name="logErrorIncorrectNum" xml:space="preserve">
    <value>正しくない数字が入力されました。</value>
  </data>
  <data name="logInfoNormalEnd" xml:space="preserve">
    <value>プロセスが正常に完了しました。</value>
  </data>
  <data name="soundPath0" xml:space="preserve">
    <value>VOICEVOX_SoundData\\どんな数字も最後には３になってしまいます。...怪しいポイントでトリックを見破ってみましょう！.wav</value>
  </data>
  <data name="soundPath1" xml:space="preserve">
    <value>VOICEVOX_SoundData\\20240504_その数字に5を掛け…_003.wav</value>
  </data>
  <data name="soundPath10" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240506_最初の数字で割ると…_001.wav</value>
  </data>
  <data name="soundPath11" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240506_お疲れ様でした！_002.wav</value>
  </data>
  <data name="soundPath2" xml:space="preserve">
    <value>VOICEVOX_SoundData\\20240505_その数字に2を掛け…_002.wav</value>
  </data>
  <data name="soundPath3" xml:space="preserve">
    <value>VOICEVOX_SoundData\\20240505_最初の数字で割って…_003.wav</value>
  </data>
  <data name="soundPath4" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240505_７を引いてください。_001.wav</value>
  </data>
  <data name="soundPath5" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240505_３になりましたね？ _002.wav</value>
  </data>
  <data name="soundPath6" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240505_ここではありません…_003.wav</value>
  </data>
  <data name="soundPath7" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240506_どれが答えでしょう_001.wav</value>
  </data>
  <data name="soundPath8" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240506_違いますよ！_002.wav</value>
  </data>
  <data name="soundPath9" xml:space="preserve">
    <value>VOICEVOX_SoundData\20240506_正解です！_003.wav</value>
  </data>
  <data name="stringBtnDecisionClicked1" xml:space="preserve">
    <value>その数字に5を掛けた数字を入力してください。</value>
  </data>
  <data name="stringBtnDecisionClicked2" xml:space="preserve">
    <value>その数字に2を掛けた数字を入力してください。</value>
  </data>
  <data name="stringBtnDecisionClicked3" xml:space="preserve">
    <value>最初の数字で割ってください。</value>
  </data>
  <data name="stringBtnDecisionClicked4" xml:space="preserve">
    <value>７を引いてください。</value>
  </data>
  <data name="stringBtnDecisionClicked5" xml:space="preserve">
    <value>３になりましたね？</value>
  </data>
  <data name="stringBtnPointOutClicked1" xml:space="preserve">
    <value>トリックの正体は？</value>
  </data>
  <data name="stringBtnPointOutClicked2" xml:space="preserve">
    <value>ここではありません！</value>
  </data>
  <data name="stringMissNumber1" xml:space="preserve">
    <value>正しい数値を入力してください。</value>
  </data>
  <data name="stringMissNumber2" xml:space="preserve">
    <value>ここではありません！</value>
  </data>
  <data name="stringOp1" xml:space="preserve">
    <value>どんな数字も最後には３になってしまいます。</value>
  </data>
  <data name="stringOp2" xml:space="preserve">
    <value>怪しいポイントでトリックを見破ってみましょう！</value>
  </data>
  <data name="stringPointOut1" xml:space="preserve">
    <value>違いますよ！</value>
  </data>
  <data name="stringPointOut2" xml:space="preserve">
    <value>正解です</value>
  </data>
  <data name="stringPointOut3" xml:space="preserve">
    <value>最初の数字で割るとどんな数字でも必ず10になりますね！</value>
  </data>
  <data name="stringPointOut4" xml:space="preserve">
    <value>お疲れ様でした！</value>
  </data>
  <data name="stringSwitchEvent" xml:space="preserve">
    <value>""</value>
  </data>
</root>